#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

template <typename T> using o_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
//for multiset -> less_equal
//if face any problem in multiset, use pair in set
//for set -> less
//for reverse set -> greater
int32_t main() {
  o_set<int> se;
  se.insert(4);
  se.insert(2);
  se.insert(2);
  se.insert(5);
  se.insert(5);
  
  for (auto u : se) cout << u << " "; cout << endl;
  cout << se.order_of_key(5) << '\n'; // number of elements < 5
  cout << se.order_of_key(6) << '\n'; // number of elements < 6
  cout << se.order_of_key(10) << '\n'; // number of elements < 10
  cout << (*se.find_by_order(1)) << '\n'; // if you imagine this as a 0-indexed vector, what is se[1]?
  return 0;
}
